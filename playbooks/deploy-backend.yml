---
- name: Deploy and run backend
  hosts: backend
  become: true
  vars:
    ansible_user: ubuntu
    monorepo_dest: "/opt/devops-rampup"
    db_host: "{{ lookup('env', 'DB_HOST') }}"
    db_user: "{{ lookup('env', 'DB_USER') }}"
    db_password: "{{ lookup('env', 'DB_PASSWORD') }}"
    db_name: "movie_db"
    backend_port: 80
    backend_path: "{{ monorepo_dest }}/movie-analyst-api"
    sql_schema_file: "{{ backend_path }}/schema.sql"

  tasks:
    - name: Update repository to latest version
      git:
        repo: "https://github.com/Santicm23/devops-rampup.git"
        dest: "{{ monorepo_dest }}"
        version: "master"
        force: yes
      become_user: "{{ ansible_user }}"
      register: git_update

    - name: Install/Update dependencies
      shell: pnpm install
      args:
        chdir: "{{ backend_path }}"
      become_user: "{{ ansible_user }}"

    - name: Install MySQL client
      apt:
        name: mysql-client
        state: present

    - name: Install Python MySQL library
      apt:
        name: python3-pymysql
        state: present

    - name: Execute SQL schema file (creates DB and tables if not exist)
      shell: mysql -h {{ db_host }} -u {{ db_user }} -p{{ db_password }} < {{ sql_schema_file }}
      args:
        chdir: "{{ backend_path }}"
      become_user: "{{ ansible_user }}"

    - name: Run database seed script
      shell: node seeds.js
      args:
        chdir: "{{ backend_path }}"
      environment:
        DB_HOST: "{{ db_host }}"
        DB_USER: "{{ db_user }}"
        DB_PASS: "{{ db_password }}"
        DB_NAME: "{{ db_name }}"
        NODE_ENV: "production"
      become_user: "{{ ansible_user }}"
      register: seed_result
      ignore_errors: yes

    - name: Display configuration before starting
      debug:
        msg:
          - "DB Host: {{ db_host }}"
          - "DB Name: {{ db_name }}"
          - "Backend Port: {{ backend_port }}"
          - "Backend Path: {{ backend_path }}"

    - name: Kill existing backend process
      shell: pkill -f "node server.js" || true
      ignore_errors: yes
      failed_when: false

    - name: Start backend with environment variables
      shell: |
        nohup node server.js > /var/log/backend.log 2>&1 &
      args:
        chdir: "{{ backend_path }}"
      environment:
        DB_HOST: "{{ db_host }}"
        DB_USER: "{{ db_user }}"
        DB_PASS: "{{ db_password }}"
        DB_NAME: "{{ db_name }}"
        PORT: "{{ backend_port }}"
        NODE_ENV: "production"
      become_user: "{{ 'root' if backend_port < 1024 else ansible_user }}"

    - name: Wait for backend to start
      wait_for:
        port: "{{ backend_port }}"
        delay: 2
        timeout: 30
      ignore_errors: yes

    - name: Check if backend is running
      shell: pgrep -f "node server.js"
      register: backend_process
      ignore_errors: yes

    - name: Display backend process status
      debug:
        msg: "Backend is {{ 'running with PID ' + backend_process.stdout if backend_process.rc == 0 else 'NOT running' }}"

    - name: Configure firewall for backend
      ufw:
        rule: allow
        port: "{{ backend_port }}"
        proto: tcp

    - name: Show backend logs
      shell: tail -20 /var/log/backend.log
      register: backend_logs
      ignore_errors: yes

    - name: Display backend logs
      debug:
        msg: "{{ backend_logs.stdout_lines }}"
      when: backend_logs.stdout_lines is defined
